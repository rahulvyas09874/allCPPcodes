#include <iostream>
#include <bits/stdc++.h>
#define ll long long
using namespace std;
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
// #define pbds tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

// Pragmas
#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2,bmi,bmi2,lzcnt,popcnt")


////  HASH FOR UNORDERED MAP OF THE FORM <PAIR<INT,INT>,INT>
struct HASH{
  size_t operator()(const pair<int,int>&x)const{
    return hash<long long>()(((long long)x.first)^(((long long)x.second)<<32));
  }
};
//// HASH FOR MIN COLLISION
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};

int tsp(vector<vector<int>>graph,long long int visitedCities,int curr,int n,vector<vector<int>>&dp){
    // base case when all the cities are visited
    if(visitedCities==((1<<n)-1)){   //(let us suppose there are 4 cities 1<<4 is 10000 and when all cities are visited the bits are like 1111 which is (1<<4)-1)
         return graph[curr][0];
    }
    
    if(dp[visitedCities][curr]!=-1){
        return dp[visitedCities][curr];
    }

    long long int curr_ans=LLONG_MAX;
    // NOW ITERATE OVER ALL THE OTHER NODES FROM CURR NODE AND FOR EVERY NODE CALL THE TSP 
    for(int node=0;node<n;node++){
        // check if curr node is already added to our path or not
        if((visitedCities&(1<<node))==0){
            long long int aage=graph[curr][node]+tsp(graph,(visitedCities|(1<<node)),node,n,dp);
            curr_ans=min(curr_ans,aage); 
        }
    }
    return dp[visitedCities][curr]=curr_ans;
}




int main() 
{
    #ifndef ONLINE_JUDGE
    freopen("Input.txt", "r", stdin);
    freopen("Output.txt","w", stdout);
    freopen("Error.txt", "w", stderr);
    #endif

   vector< vector<int>>dist = {
        {0,20,42,25},
        {20,0,30,34},
        {42,30,0,10},
        {25,34,10,0}
    };
   int cities=4;
   vector<vector<int>>dp(1<<cities,vector<int>(cities,-1));    // 2d dp where rows signifies visited cities and column signifies city we are currently at
   cout << tsp(dist,1,0,4,dp);

    

   
   return 0;
}
   

    




